import com.penguin.auth.shiro.cache.ShiroCacheManager;
import com.penguin.auth.shiro.realm.ShiroRealm;
import com.penguin.auth.shiro.session.ShiroRedisSessionDao;
import com.penguin.auth.shiro.session.ShiroSessionManager;
import org.apache.shiro.authc.credential.HashedCredentialsMatcher;
import org.apache.shiro.cache.CacheManager;
import org.apache.shiro.mgt.SecurityManager;
import org.apache.shiro.realm.Realm;
import org.apache.shiro.session.mgt.SessionManager;
import org.apache.shiro.session.mgt.eis.SessionDAO;
import org.apache.shiro.spring.LifecycleBeanPostProcessor;
import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;
import org.springframework.beans.factory.config.MethodInvokingFactoryBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;

import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Shiro配置
 * @date: 2019/3/14 23:06
 * @since: 1.0
 */
@Configuration
public class ShiroConfiguration {

    /**
     * 创建shiroFilterFactoryBean
     * @param securityManager  securityManager
     * @return securityManager
     */
    // @Bean("bean"),不指定bean姓名默认是方法名第一个字母小写
    @Bean
    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) {
        ShiroFilterFactoryBean filterFactoryBean = new ShiroFilterFactoryBean();
        filterFactoryBean.setSecurityManager(securityManager);
        // 配置过滤器
        Map<String, String> filterChainDefinitionMap = new LinkedHashMap<>();
        // 配置静态文件不被拦截
        filterChainDefinitionMap.put("/static/**", "anon");
        filterChainDefinitionMap.put("/signIn", "anon");
        // 配置退出
        filterChainDefinitionMap.put("/logout", "logout");
        // 所有请求都需要验证权限
        filterChainDefinitionMap.put("/**", "authc");
        // 登录Url
        filterFactoryBean.setLoginUrl("/login");
        // 登录成功后要跳转的链接
        filterFactoryBean.setSuccessUrl("/");
        // 未授权页面
        filterFactoryBean.setUnauthorizedUrl("/403");
        // 配置过滤器
        filterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
        return filterFactoryBean;
    }

    @Bean
    public SecurityManager securityManager() {
        DefaultWebSecurityManager defaultSecurityManager = new DefaultWebSecurityManager();
        defaultSecurityManager.setRealm(shiroRealm());
        defaultSecurityManager.setSessionManager(sessionManager());
        return defaultSecurityManager;
    }

    /**
     * session管理器
     * @return sessionManager实例
     */
    @Bean
    public SessionManager sessionManager() {
//        DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();
        ShiroSessionManager sessionManager = new ShiroSessionManager();
        sessionManager.setSessionDAO(sessionDao());
        sessionManager.setSessionIdUrlRewritingEnabled(false); // 设置不在url中添加JSESSIONID参数
        return sessionManager;
    }

    /**
     * sessionDAO
     * @return sessionDAO实例
     */
    @Bean
    public SessionDAO sessionDao() {
        ShiroRedisSessionDao sessionDao = new ShiroRedisSessionDao();
        return sessionDao;
    }

    /**
     * 自定义realm
     * @return realm实例对象
     */
    @Bean
    public Realm shiroRealm() {
        ShiroRealm shiroRealm = new ShiroRealm();
        // 告诉realm,使用credentialsMatcher加密算法类来验证密文
        shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());
//        shiroRealm.setCachingEnabled(false);
        shiroRealm.setCacheManager(cacheManager());
        return shiroRealm;
    }

    @Bean
    public CacheManager cacheManager() {
        return new ShiroCacheManager();
    }

    /**
     * shiro加密匹配设置
     * @return shiro凭证匹配器
     */
    @Bean
    public HashedCredentialsMatcher hashedCredentialsMatcher() {
        HashedCredentialsMatcher matcher = new HashedCredentialsMatcher();
        matcher.setHashAlgorithmName("md5");// 散列算法:这里使用MD5算法;
        matcher.setHashIterations(2);// 散列的次数，比如散列两次，相当于 md5(md5(""));
        // storedCredentialsHexEncoded默认是true，此时用的是密码加密用的是Hex编码；false时用Base64编码
        matcher.setStoredCredentialsHexEncoded(true);
        return matcher;
    }


    @Bean
    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {
        return new LifecycleBeanPostProcessor();
    }

    /**
     * DefaultAdvisorAutoProxyCreator是用来扫描上下文，寻找所有的Advistor(通知器），<br/>
     * 将这些Advisor应用到所有符合切入点的Bean中
     * @return DefaultAdvisorAutoProxyCreator
     */
    @Bean
    @DependsOn("lifecycleBeanPostProcessor")
    public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() {
        DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();
        advisorAutoProxyCreator.setProxyTargetClass(true);
        return advisorAutoProxyCreator;
    }

    /**
     * 开启Shiro注解的使用
     * @return AuthorizationAttributeSourceAdvisor对象
     */
    @Bean
    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor() {
        AuthorizationAttributeSourceAdvisor sourceAdvisor = new AuthorizationAttributeSourceAdvisor();
        sourceAdvisor.setSecurityManager(securityManager());
        return sourceAdvisor;
    }

    /**
     *
     * @return MethodInvokingFactoryBean 实例
     */
    @Bean
    public MethodInvokingFactoryBean methodInvokingFactoryBean() {
        MethodInvokingFactoryBean bean = new MethodInvokingFactoryBean();
        bean.setStaticMethod("org.apache.shiro.SecurityUtils.setSecurityManager");
        bean.setArguments(securityManager());
        return bean;
    }
}
